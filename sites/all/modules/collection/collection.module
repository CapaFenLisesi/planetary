<?php

function collection_menu() {
  $items = array();

  $items['collection/%/reorder'] = array(
    'title' => 'Reorder collection',
    'description' => 'Show a page with a sortable tabledrag form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('collection_form', 1),
    'access callback' => TRUE,
    // Do not name an includes file the same as your form name, as you may run
    // into 'undefined index in drupal_retrieve_form()' notices.
    'file' => 'collection.table.inc',
  );

  $items['collection/%/attach'] = array(
    'title' => 'Attach content',
    'type' => MENU_CALLBACK,
    'page callback' => 'collection_attach_content',
    'page arguments' => array(1),
    'access arguments' => array('create correction content')
  );


  $items['collection/confirm/%/%'] = array(
    'title' => 'Confirm attachment',
    'type' => MENU_CALLBACK,
    'page callback' => 'collection_confirm_attachment',
    'page arguments' => array(2, 3), //'nid_of_article','nid_of_collection'),
    'access arguments' => array('create correction content')
  );

  $items['collection/detach/%/%'] = array(
    'title' => 'Detach content from collection',
    'type' => MENU_CALLBACK,
    'page callback' => 'collection_detach_content',
    'page arguments' => array(2, 3), //'nid_of_article','nid_of_collection'),
    'access arguments' => array('create correction content'));

  return $items;
}

/* This function allows the user to attach articles and problems to a collection.
   - TODO: it would be good to improve this presentation so that the *selection*
     could be filtered in a reasonable way, e.g. filtering by "my articles"
     or MSC or some other criteria.  Right now, the user has to choose from
     the entire collection of articles, which isn't particularly elegant or feasible.
     Compare issue #144 on Github.
 */
function collection_attach_content($nid) {
  global $base_url;

  $count = db_query("SELECT COUNT(nid) as count FROM node WHERE type IN ('article','problem')")->fetchObject();

//if we have articles or problems
  if ($count->count > 0) {

    //get all posible content that can be attached to this collection
    $all_articles_and_problems = _collection_getAllContent();

    //construct the header of the table
    $header = array(array('data' => 'Title', 'field' => 'n.nid'),
      array('data' => "Author", 'field' => 'n.title'),
      array('data' => 'Attach', 'field' => 'Attach')
    );

    // iterate over the content and construct the rows of the table 
    $rows = array();
    foreach ($all_articles_and_problems as $content_item) {
      $rows[] = array(
        array('data' => l($content_item->title, 'node/' . $content_item->nid),
	      'field' => 'n.title'),
        array('data' => l(user_load($content_item->uid)->name, 
                          'user/' . $content_item->uid), 
	      'field' => 'n.author'),
        array('data' => 
	      theme_attach_content_icon(
					array('type' => $content_item->type, 
					      'url' => $base_url . '/collection/confirm/'
                                                                 . $nid . '/'
                                                                 . $content_item->nid)))
		      );
    }

    return l('Add a new article', 'node/add/article')//on top of the table
        . " " . l('Add a new problem', 'node/add/problem')//on top of the table
        . theme('table', array(
          'header' => $header,
          'rows' => $rows
        ))
        . theme('pager'); //adds the pagination element in the bottom of the table
  }
  else {
    //in the (even possible?) occasion we do not have any content to list
    drupal_set_message("Sorry there is currently not a single element of content to add to a collection!" .
        "Yeap! Not even a single article... :( ");
    drupal_goto('/');
  }
}

/*
 * helper function to return all articles and problems of the site
 * to be displayed in attach to collection list
 */

function _collection_getAllContent() {
  $query = db_select('node', 'n')
      ->fields('n')
      ->condition('type', array('article', 'problem'), 'IN')
      ->extend('PagerDefault')
      ->extend('TableSort')
      ->limit(20);
  $result = $query->execute();
  return $result;
}

//the way markup is created for attach link in the table
function theme_attach_content_icon($variables) {
  $output = l(
      t('Attach'), $variables['url'], array(
    'attributes' => array(
      'class' => "attach_content_icon",
      'title' => t('Attach this ' . $variables['type'] . ' to this collection'),
      ))
  );
  return $output;
}

function collection_confirm_attachment($collection_id, $content_id) {

  $count = db_query("SELECT COUNT(*) as count FROM collection_has_content WHERE cid=$collection_id")->fetchObject();

  $how_many = $count->count + 1;

  db_merge('collection_has_content')
      ->key(array('cid' => $collection_id, 'nid' => $content_id))
      ->fields(array('cid' => $collection_id, 'nid' => $content_id, 'rank' => $how_many))
      ->execute();

  $content = node_load($content_id);
  drupal_set_message('The ' . $content->type . ' has been added to this collection');
  drupal_goto('node/' . $collection_id);
}

/* Add some links for the collection owner.  
* - Note: actually, these will probably be showing up for
*         everyone, and it would really be better
*         for them to go into an "interact box".
*
* - Also: It would be good to have a "remove item" link, or make
*         the existing link into "add/remove" and provide that functionality
*
* NB: we only show the "reorder" link if there's more than one entry. */

function collection_add_links($node, $rows){
  $links = array(
		 'add-to-collection' => l("Attach item", 
					  'collection/' . $node->nid . '/attach')
		 );
  if (count($rows) > 1) {
    $links[] = l("Reorder this list", 
		 'collection/' . $node->nid . '/reorder');
  }
  return $links;
}

/* implements hook_node_view
 * - Deals with presenting collections
 * - Also deals with tracking user reading behavior, assuming we want to do that
 */
function collection_node_view($node) {
  global $user;
 
  if ($node->type == 'collection') {

    // First build the table, which is the main thing...

    $contents_of_this_collection = db_query("SELECT n.* from node n ".
					    "INNER JOIN collection_has_content chc ".
					    "ON (n.nid = chc.nid) WHERE chc.cid=:col_id",
					    array(':col_id' => $node->nid));

    //construct the header of the table
    $header = array(
		    array('data' => 'Title', 'field' => 'n.nid'),
		    array('data' => "Author", 'field' => 'n.title'),
		    array('data' => "My info", 'field' => 'paradata'),
		    );

    // iterate over this content and construct the rows of the table
    $rows = array();
    foreach ($contents_of_this_collection as $content_item) {

      // Paradata is only meaningful if the user is logged in
      // so we check that before we create it

      $paradataColumn = "";
      if ($user->uid){
	/* content can either be a problem or an article,
           for problems, we will record whether or not the USER has
	   submitted a solution. */
	if ($content_item->type=='problem') {
	  // we will find out if the current user has
	  // submitted a solution to this problem
	  $sql = "select * from problem_has_solution phs ".
	    "INNER JOIN node n ON (phs.sid=n.nid) ".
            "WHERE pid=:pid AND n.uid=:uid";
	  $solutions = db_query($sql,array(':pid'=>$content_item->nid,
					   ':uid'=>$user->uid));
	  //dd($solutions);        
	  $counter =0;
	  $submittedSolutionsLinks = "";
	  foreach ($solutions as $sol){
            $counter++;
            $submittedSolutionsLinks .= " (".l($counter,'node/'.$sol->sid).") ";
          }
        
	  if ($counter>0){
	    $paradataColumn .= "Submitted".$submittedSolutionsLinks;
	  }else {
	    $paradataColumn .= l("Submit a solution",'node/add/solution/'.$sol->pid);
	  }        
	} 
	/* we deal with articles by showing whether the article in question
	   has been read... NB. to work properly, this requires a patch to the
	   userpoints module, need to get that sorted out -- and ideally make the
           corresponding logging "opt-in". */
	else if ($content_item->type=='article') {
	  $sql = "select count(*) AS count from userpoints_txn ".
	    "WHERE uid=:uid AND entity_id=:nid AND points=0";

	  $article_read = db_query($sql,array(':nid'=>$content_item->nid,
					      ':uid'=>$user->uid))->fetchObject();

	  if ($article_read->count>0) {
	    $paradataColumn .= "article read already";
	  } else {
	    $paradataColumn .= "not yet read";
	  }
	}
      } else {
	$paradataColumn = "User not logged in";
      }
      
      $rows[] = array(
		      array('data' => l($content_item->title, 
					'node/' . $content_item->nid),
			    'field' => 'n.title'),
		      array('data' => l(user_load($content_item->uid)->name, 
					'user/' . $content_item->uid),
			    'field' => 'n.author'),
		      array('data' => $paradataColumn,
			    'field' => 'paradata'),
		      );
    }

    // Now we theme the table.
    // (However, this only makes sense when there's more than zero rows.)
    if (count($rows) > 0) {
      // We will add a pagination element at the bottom of the table,
      // Which is only useful if there's a lot of content of course!
      $html = theme('table', array(
				   'header' => $header,
				   'rows' => $rows
				   ))
	. theme('pager'); 

      // the collections_contents_table will be picked up by the template 
      $node->content['collection_contents_table'] = array(
							  '#markup' => $html,
							  );
    }
   

    // Now add some links for the OWNER (only) to interact with the collection.
    // (Some additional interactions could be added for other people later.)
    if ($user->uid == $node->uid) {
      if (isset($node->content['planetary_links'])) {
	$oldlinks = $node->content['planetary_links']['#links'];
	if (!empty($oldlinks)) {
	  $newlinks = array_merge($oldlinks, collection_add_links($node, $rows));
	} else {
	  $newlinks = collection_add_links($node, $rows);
	  //  dd($newlinks,"NEW - inner ");
	}
      } else {
	$newlinks = collection_add_links($node, $rows);
      }

      $node->content['planetary_links'] = array(
						'#markup' => '',
						'#weight' => 10,
						'#theme' => 'planetary_links',
						'#links' => $newlinks
						);
    }
  }  /* End of "view a collection" case */

  // This is code to add "zero points" for viewing an article.  
  // Making this work properly is going to require some work
  // (including a small patch to the userpoints module). 
  // It should probably also be made "opt in".

  if ($user->uid) {
    if($node->type=='article'){
      $points_params = array('uid' => $user->uid,
			     'points' => 0,
			     // there must be a way to make this show up as a link...?
			     // look in the userpoints.pages.inc
			     'description' => $node->title.' viewed',
			     'entity_id' => $node->nid,
			     'entity_type' => 'node'
			     );
      userpoints_userpointsapi($points_params);
    }
  }
}

function collection_theme($existing, $type, $theme, $path) {
  $to_return = array(
    'collection_form' => array(
      'render element' => 'form',
      'file' => 'collection.table.inc',
    ),
    'collection_contents' => array(
      'variables' => array('links' => array()),
    ),
      //'collection_contents_table' => array(),    
  );
  return $to_return;
}

function theme_collection_contents($variables) {
  //dd('in the theme of articles of this collection');
  $return = "";
  foreach ($variables['links'] as $link) {
    $return = $return . l($link->title, 'node/' . $link->nid) . " ";
  }
  return $return;
}


/* implements node_view 
   Ceiling cat is watching you read math articles
*/

