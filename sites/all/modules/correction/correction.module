<?php

/**
 * Provides functionality for the correction content type
 * @author Alex Dumitru alex@flanche.net
 * @package Other
 * @version 7.x-1.0-alpha
 * @todo Themeing functionality
 *
 * This module provides a basic "bug reporting" functionality for use with the
 * PlanetMath encyclopedia.  A more advanced bug tracking system would allow
 * users to re-open closed corrections, assign them to other users, etc.
 *
 * One basic thing that should be fixed: *closed* corrections probably should
 * not be editable (I'll make an issue for that).
 */
define("CORRECTION_ATTACH_TYPES", serialize(array('article', 'image')));

function correction_model_getAllCorrections($headers) {
  $query = db_select('node', 'n')
          ->fields('n', array('nid', 'title', 'changed'))
          ->extend('PagerDefault')
          ->extend('TableSort')
          ->limit(20);
  $query = $query->orderByHeader($headers);
  $query->innerJoin('field_data_field_correction_accepted', 'fca', 'fca.entity_id = n.nid');
  $query->innerJoin('field_data_field_correction_closed', 'fcc', 'fcc.entity_id = n.nid');
  $query->innerJoin('users', 'u', 'u.uid = n.uid');
  $query->fields('fca', array('field_correction_accepted_value'));
  $query->fields('fcc', array('field_correction_closed_value'));
  $query->fields('u', array('uid', 'name'));
  $result = $query->execute();
  return $result;
}

function correction_view_correctionPage() {
  $header = array(array('data' => 'Title', 'field' => 'n.title'),
      array('data' => "Author", 'field' => 'u.name'),
      array('data' => "Updated", 'field' => 'n.changed'),
      array('data' => 'Status', 'field' => 'fca.field_correction_accepted_value')
  );
  $corrections = correction_model_getAllCorrections($header);
  $rows = array();
  foreach ($corrections as $correction) {
    $status = 'None';
    if ($correction->field_correction_accepted_value && $correction->field_correction_closed_value) {
      $status = 'Accepted';
    } else if (!$correction->field_correction_accepted_value && $correction->field_correction_closed_value) {
      $status = 'Rejected';
    } else {
      $status = 'Pending';
    }
    $rows[] = array(
        array('data' => l($correction->title, 'node/' . $correction->nid), 'field' => 'n.title'),
        array('data' => l($correction->name, 'user/' . $correction->uid), 'field' => 'n.title'),
        array('data' => date('Y-m-d', $correction->changed), 'field' => 'n.changed', 'sort' => 'DESC'),
        array('data' => $status, 'field' => 'fca.field_correction_accepted_value')
    );
  }
  return l('Add a new correction', 'node/add/correction') . theme('table', array(
              'header' => $header,
              'rows' => $rows
          )) . theme('pager');
}

/**
 * Implementation of hook_menu
 * Two new paths for accept correction and reject correction. correction/:nid/accept|reject
 * @return array
 */
function correction_menu() {
  $items = array();

  $items['correction/%/accept'] = array(
      'title' => 'Accept Correction',
      'type' => MENU_CALLBACK,
      'page callback' => 'correction_accept_correction',
      'page arguments' => array(1),
      'access arguments' => array('create correction content')
  );

  $items['corrections'] = array(
      'title' => 'Corrections',
      'type' => MENU_NORMAL_ITEM,
      'page callback' => 'correction_view_correctionPage',
      'page arguments' => array(1),
      'access callback' => true
  );

  $items['correction/%/reject'] = array(
      'title' => 'Reject Correction',
      'type' => MENU_CALLBACK,
      'page callback' => 'correction_reject_correction',
      'page arguments' => array(1),
      'access arguments' => array('create correction content')
  );

  return $items;
}

/**
 * Accepts a correction for a given article. Does the necesarry checks, no other action required
 * @param $nid The correction's id 
 */
function correction_accept_correction($nid) {
  global $user;
  $correction = node_load($nid);
  $article = node_load($correction->field_correction_article['und'][0]['nid']);
  if ($article->uid === $user->uid) {
    $correction->field_correction_accepted['und'][0]['value'] = 1;
    $correction->field_correction_closed['und'][0]['value'] = 1;

    $correction->field_correction_closedby['und'][0]['uid'] = $user->uid;

    node_save($correction);

    // award a different number of points depending on the type of correction
    $value = 0;
    switch ($correction->field_correction_type['und'][0]['value']) {
    case 'err':
      $value = 30;
      break;
    case 'add':
      $value = 20;
      break;
    case 'met':
      $value = 10;
      break;
    }
    $points_params = array('uid' => $user->uid,
        'points' => $value,
        'description' => 'Correction has been accepted',
        'entity_id' => $nid,
        'entity_type' => 'node'
    );
    userpoints_userpointsapi($points_params);
    drupal_set_message("The correction was accepted: added $value points");
  } else {
    drupal_set_message("You can't accept the correction!");
  }
  drupal_goto();
}

/**
 * Rejects a correction for a given article. Does the necesarry checks, no other action required
 * @param $nid The correction's id 
 */
function correction_reject_correction($nid) {
  global $user;
  $correction = node_load($nid);
  $article = node_load($correction->field_correction_article['und'][0]['nid']);
  if ($article->uid === $user->uid) {
    $correction->field_correction_accepted['und'][0]['value'] = 0;
    $correction->field_correction_closed['und'][0]['value'] = 1;

    $correction->field_correction_closedby['und'][0]['uid'] = $user->uid;

    node_save($correction);
    drupal_set_message("The correction was rejected");
  } else {
    drupal_set_message("You can't reject the correction!");
  }
  drupal_goto();
}


function correction_add_links($node) {
  $links = array(
      'add-correction' => l('Add a correction', 'node/add/correction/' . $node->nid)
  );
  return $links;
}

/**
 * Implementation of hook_node_view()
 * Adds two markup fields to the correction fields. Accept/Reject links | Status of the correction
 * @todo Show it to groups as well, not only to author
 * @param stdClass $node
 * @param string $view_mode 
 */
function correction_node_view($node, $view_mode) {
  if (in_array($node->type, unserialize(CORRECTION_ATTACH_TYPES))) {
    $newlinks = array();
    if (isset($node->content['planetary_links'])) {
      //dd($node->content['planetary_links']);
      $oldlinks = $node->content['planetary_links']['#links'];
      //dd($oldlinks,"old");
      if (!empty($oldlinks)) {
        $newlinks = array_merge($oldlinks, correction_add_links($node));
      } else {
        $newlinks = correction_add_links($node);
        //  dd($newlinks,"NEW - inner ");
      }
    } else {
      $newlinks = correction_add_links($node);
      // dd($newlinks,"NEW - outer ");
    }

    $node->content['planetary_links'] = array(
        '#markup' => '',
        '#weight' => 10,
        '#theme' => 'planetary_links',
        '#links' => $newlinks
    );
  }

  if ($node->type == 'correction') {
    global $user;
    $target_nid = $node->field_correction_article['und'][0]['nid'];
    $article = node_load($target_nid);
    if ($article->uid == $user->uid && !$node->field_correction_closed['und'][0]['value']) {
      $node->content['correction_links'] = array(
          '#markup' => '<h4 style="font-weight:bold">Manage Correction:</h4>' . l('Accept Correction', 'correction/' . $node->nid . '/accept', array('query' => drupal_get_destination())) . ' | ' . l('Reject Correction', 'correction/' . $node->nid . '/reject', array('query' => drupal_get_destination())),
          '#weight' => '-3'
      );
    }
    $status = 'Waiting for response';
    if ($node->field_correction_closed['und']['0']['value']) {
      $status = $node->field_correction_accepted['und'][0]['value'] ? "Accepted" : "Rejected";
    }
    $node->content['correction_status'] = array(
        '#markup' => '<b>Status: </b>' . $status,
        '#weight' => '1'
    );
  }
}

// This is how we get the *form* to show the right stuff when the user
// clicks through on an "Add a Correction" link.  (That's done.)

function correction_form_correction_node_form_alter(&$form, &$form_state, $form_id) {
  // We don't have to specially set a reference to the user who *submits*
  // the correction, since that's recorded for us by normal drupal "insert"
  // routine.  However, we *will* have to record a reference to the user
  // who *closes* the correction.  That will have to follow a similar
  // logic to what we do here (I think?), but done elsewhere (?).

  // We will furthermore want to *hide* some fields that are only used "internally"
  hide($form['field_correction_accepted']);
  hide($form['field_correction_closed']);

  if(isset($form['#node']->field_correction_article['und'][0]['nid'])) {
    $val = $form['#node']->field_correction_article['und'][0]['nid'];
  } else {
    $val = arg(3); 
    // We can hide these elements at insert time (and we know this is insert time)
    // since otherwise the correction_article would be defined already.
    hide($form['field_correction_closedby']);
  }

  // I don't think there's any good time in the workflow to enter this remark
  // So, henceforth we will just hide this field and have any discussion in
  // the comments
  hide($form['field_correction_remark']);

  $form['field_correction_article']['und'][0]['nid']['#default_value'] = $val;
}

function correction_node_insert($node) {
  if($node->type=='correction') {
  $nid=$node->field_correction_article['und'][0]['nid'];
  $article=node_load($nid);
  $owner=user_load($article->uid);
  correction_notify($owner,$article);
  }
}

function correction_notify($account,$article) {
     $params['account'] = $account;
     $params['article'] = $article;
     drupal_mail('correction', 'notice', $account->mail, user_preferred_language($account), $params);
 }

function correction_mail($key, &$message, $params) {
  $data['user'] = $params['account'];
  $options['language'] = $message['language'];
  user_mail_tokens($variables, $data, $options);
  switch($key) {
    case 'notice':
      $langcode = $message['language']->language;
      $message['subject'] = t('New correction on beta.planetmath.org', $variables, array('langcode' => $langcode));
      $message['body'][] = 
	t("Dear ".$params['account']->name.
	  "\n\nThere is a new correction to your article \"".
	  $params['article']->title.
	  "\".\n\nPlease take a look at the article, at http://beta.planetmath.org/node/" .$params['article']->nid. 
	  ", and make any required fixes promptly.", $variables, array('langcode' => $langcode));
      break;
  }
}