<?php
/**
 * @file
 * A block module that displays recent blog and forum posts.
 */

/**
 * Implements hook_help.
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function current_posts_help($path, $arg) {
  switch ($path) {
    case "admin/help#current_posts":
      return '<p>' . t('Displays links to nodes created on this date') . '</p>';
      break;
  }
}

/**
 * Implments hook_block_info().
 */
function current_posts_block_info() {
  $blocks['current_posts'] = array(
    'info' => t('Current posts'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}

/**
 * Custom content function.
 *
 * Set beginning and end dates, retrieve posts from database
 * saved in that time period.
 *
 * @return
 *   A result set of the targeted posts.
 */
function current_posts_contents($display) {
  $today = getdate();
  $start_time = mktime(0,0,0, $today['mon'], ($today['mday'] - 7), $today['year']);
  $end_time = time();

  $max_num = variable_get('current_posts_max', 3);
    
  
  $query = db_select('node','n')
    ->fields('n', array('nid', 'title', 'created'))
    ->condition('status', 1)
    ->condition('created', array($start_time, $end_time), 'BETWEEN')
    ->orderBy('created', 'DESC');
    
  if ($display == 'block') {
    $query->range(0, $max_num);
  }   
  return $query->execute();
}

function current_posts_block_view($delta = '') {
  switch ($delta) {
    case 'current_posts':
      $block['subject'] = t('Current posts');
      if (user_access('access content')) {
        //retrieve and process data here
        $result = current_posts_contents('block');
        $items = array();
        foreach ($result as $node) {
          $items[] = array(
            'data' => l($node->title, 'node/' . $node->nid),
          );
        }
        if (empty($items)) {
          $block['content'] = t('No posts available.');
        }
        else {
          $block['content']['posts'] = array(
            '#theme' => 'item_list__current_posts__block',
            '#items' => $items,
          );
          $block['content']['more'] = array(
            '#theme' => 'more_link__current_posts',
            '#url' => 'current_posts',
            '#title' => t('See the full list of current posts'),
          );
        }
      }
  }
  return $block;
}

function current_posts_menu() {
  $items = array();

  $items['admin/config/content/current_posts'] = array(
    'title' => 'Current posts',
    'description' => 'Configuration for Current posts module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('current_posts_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
  );
  
  $items['current_posts'] = array(
    'title' => 'Current posts',
    'page callback' => '_current_posts_page',
    'access arguments' => array('access current_posts content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * 
 * Enter description here ...
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function current_posts_form($form, &$form_state) {
	$form['current_posts_max'] = array(
	   '#type' => 'textfield',
	   '#title' => t('Maximum number of posts'),
	   '#default_value' => variable_get('current_posts_max', 3),
	   '#size' => 2,
	   '#maxlength' => 2,
	   '#description' => t('The maximum number of links to display in the block'),
	   '#required' => TRUE, 
	);
	
	return system_settings_form($form);
}

/**
 * Implements validation for the form API
 *
 * @param unknown_type $form
 *    A structured array containng the elements and properties of the form
 * @param unknown_type $form_state
 *    An array that stores information about the form's current state during
 *    processing
 */
function current_posts_form_validate($form, &$form_state) {
	$max_num = $form_state['values']['current_posts_max'];
	if (!is_numeric($max_num)) {
		form_set_error('current_posts_max', t('You must enter an integer for the maximum number of posts to display.'));
	} else if ($max_num <= 0) {
		form_set_error('current_posts_max', t('Maximum number of posts to display must be positive.'));
	}
}

/**
 * Implements hook_permission().
 */
function current_posts_permission() {
	return array(
	   'access current_posts current' => array(
	     'title' => t('Access content for the Current posts module'),
	   )
	);
}

/**
 * Custom page callback function, declared in current_posts_menu()
 */
function _current_posts_page() {
	$result = current_posts_contents('page');
	$items = array();
	foreach ($result as $node) {
		$items[] = array(
		    'data' => l($node->title, 'node/' . $node->nid),
		);
	}
	
	if (empty($items)) {
		$page_array['current_posts_arguments'] = array(
		  '#title' => t('All posts from the last week'),
		  '#markup' => t('No posts available'),
		);
		return $page_array;
	}	else {
		$page_array['current_posts_arguments'] = array(
		  '#title' => t('All posts in the last week'),
		  '#items' => $items,
		  '#theme' => 'item_list__current_posts',
		);
		return $page_array;
	}
}





