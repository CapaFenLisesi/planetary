<?

function local_comments_permission() {
	return array('view your field');
}

/* function local_comments_add_form($cid) { */
/*   $comment = comment_load($cid); */
/*   $output = drupal_render(comment_preview($comment)); */
/*   $commands = array(); */
/*   $commands[] = ajax_command_append('#myDiv', $output); */
/*   $page = array('#type' => 'ajax', '#commands' => $commands); */
/*   ajax_deliver($page); */

/* } */

function local_comments_preprocess(&$variables, $hook) {
	drupal_add_library('system', 'drupal.ajax');
	//  drupal_add_css(drupal_get_path("module", "local_comments")."/css/jquery.contextMenu.css", array("weight"=>4));
	drupal_add_css(drupal_get_path("module", "local_comments")."/css/local_comments.css", array("weight"=>4));
	drupal_add_js(drupal_get_path("module", "local_comments")."/lib/jquery.livequery.js", array("weight"=>4));
	drupal_add_js(drupal_get_path("module", "local_comments")."/lib/jquery.scrollTo-1.4.2-min.js", array("weight"=>4));
	drupal_add_js(drupal_get_path("module", "local_comments")."/lib/jquery.glow.js", array("weight"=>4));
	drupal_add_js(drupal_get_path("module", "local_comments")."/lib/jquery.contextMenu.js", array("weight"=>5));
	drupal_add_js(drupal_get_path("module", "local_comments")."/js/local_comments.js", array("weight"=>6));
}


function local_comments_menu() {
	/* $items['local_comments/add'] = array( */
	/*   'page callback' => 'local_comments_add_form', */
	/*   'access callback' => 'user_access', */
	/*   'access arguments' => array('access content'), */
	/*   'type' => MENU_CALLBACK */
	/* ); */

	$items['local_comments/article'] = array(
    'page callback' => 'local_comments_article',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
	);
	return $items;
}

function local_comments_article ($nid = -1) {
	if ($cid < 0) return;
	$res = db_query("SELECT * FROM {local_comments} WHERE nid = :nid", array(':nid' => $nid));

	$str = array();
	foreach ($res as $record) {
		$str[] =  array(
      'id' => $record->id,
      'nid' => $record->nid,
      'eid' => $record->eid,
      'cid' => $record->cid,
		);
	}
	drupal_json_output($str);
}

//an alternative way to do it is to override the hook
// hook_form_FORM_ID_alter
function local_comments_form_alter(&$form, $form_state, $form_id) {
	if ($form_id == 'comment_node_lecture_form') {
		$form['eid'] = array(
      '#type' => 'hidden',
      '#id' => 'eid',
      '#title' => t("The ID of the element this comment references"),
      '#required' => FALSE,
      '#size' => 60,
      '#maxlength' => 64,
		);
	}
}

function local_comments_comment_insert($comment) {

	require_once( drupal_get_path('module', 'tInfoBar').'/constants.php' );

	global $user;

	$eid = $comment->eid;
	$nid = $comment->nid;
	$cid = $comment->cid;

	$fields = array('nid' => $nid, 'cid' => $cid, 'eid' => $eid);
	db_insert('local_comments')->fields($fields)->execute();

	$tInfoBar = array(
      'type'      => 'localComment',
      'context'   => $nid,
      'wordID'    => $eid,
      'user'      => $user->name,
      'text'      => $comment->comment_body['und'][0]['value']
	);
	db_insert( TABLE_TINFOBAR )->fields( $tInfoBar )->execute();
}

function local_comments_comment_view($comment, $view_mode, $langcode) {
	$lc = db_query("SELECT * FROM {local_comments} WHERE cid = :cid", array(":cid" => $comment->cid))->fetchObject();

	if ($lc) {
		$comment->eid = $lc->eid;
	} else {
		$comment->eid = "";
	}
}

function local_comments_theme_registry_alter(&$vars) {
	$vars['comment']['theme path'] = drupal_get_path('module','local_comments');
	$vars['comment']['path'] = drupal_get_path('module','local_comments');
	$vars['comment']['theme paths'] = array(0 => drupal_get_path('module','local_comments'));
}

