<?php
/*
 * @file
 * 
 * I can use apachesolr_views to create a view based on search results.
 * But I need some custom code to tweak the output so it looks better and does
 * some useful stuff!
 *
 * I'm hoping that I can use hook_preprocess_views_view_table(&$vars)
 * together with some code we wrote when we were just presenting results
 * in a (non-searchable) table ... to rewrite the contents of the table 
 * when it is presented to the user.  The application I have in mind requires
 * a pretty much complete rewrite of the table's contents.
 *
 * PARTICULARS ON THE IMPLEMENTATION STRATEGY
 *
 * The theming stuff for the block is in 
 *   block--views--acv_attachable_content_block.tpl.php
 * This is just done to get rid of the title.
 *
 * TODO
 * - It would be cool to use AJAX to do the attachment so that we can add multiple
 *   attachments (whenever this is a meaningful thing to do).
 *   - but for now it's just necessary to get the attachment operation working whatsoever...
 *
 * - It would be cool to get the search prepopulated with the title of the target node
 *
 * - It would be good to have an alternative attaching method that just autocompletes
 *   on the (known) name of the article: that should be fairly simple to add!
 */

function planetmath_attachable_content_menu() {
  $items = array();
  $items['attach/%'] = array(
      'title' => 'Attach content',
      'type' => MENU_CALLBACK,
      'page callback' => 'planetmath_attachable_content_attach',
      'page arguments' => array(1),
      'access arguments' => array('create correction content')
  );

  $items['attach/confirm/%/%'] = array(
      'title' => 'Confirm attachment',
      'type' => MENU_CALLBACK,
      'page callback' => 'question_confirm_attachment',
      'page arguments' => array(2,3),
      'access arguments' => array('create correction content')
  );

  return $items;
}

// Ah, we can always grab the current URL and do something with that.
function planetmath_attachable_content_preprocess_views_view_table(&$vars){
  global $base_url;

  $myarg = substr(current_path(),7);
  $mybase = node_load($myarg);

  // Different modules can respond differently to the "attachment" action
  // -- hook in to that here.
  if($mybase->type=='collection'){
    $mypath = "/collection/confirm/";
  } else if ($mybase->type=='question'){
    $mypath = "/question/confirm/";
  } else if ($mybase->type=='group'){
    $mypath = "/group/confirm/";
  } else{
    $mypath = "/attach/confirm/";
  }

  if($vars['view']->name == 'acv'){
    //dd(array_keys($vars));
    //dpm($vars);
    $newrows=array();
    $extraclasses=array();
    $extraattributes=array();
    if( is_array( $newrows )){
      foreach( $vars['rows'] as $dataRow){
	$mynode=node_load($dataRow['entity_id']);
	$newrows[] = array('url'=>l($mynode->title,"node/".$dataRow['entity_id']),
			   'entity_id'=>user_load($mynode->uid)->name,
			   'foo'=>l("Attach", 
				    $base_url.
				    $mypath.
				    $myarg . "/" . $dataRow['entity_id']));
	$extraclasses[] = "views-field views-field-foo";
	$extraattributes[] = array();
        }
    }
    $vars['rows']=$newrows;
    $vars['classes_array']=array('views-table','cols-3');
    $vars['fields']= array('url'=>'url',
			   'entity_id'=>'entity_id',
			   'foo'=>'foo');
    $vars['field_classes']= array('url'=>$vars['field_classes']['url'],
				  'entity_id'=>$vars['field_classes']['entity_id'],
				  'foo'=>$extraclasses);
    $vars['field_attributes']= array('url'=>$vars['field_attributes']['url'],
				     'entity_id'=>$vars['field_attributes']['entity_id'],
				     'foo'=>$extraattributes);
    $vars['header'] = array();
    //dpm($vars);
  }
}

/* "Coming back to attach it later" is a pain.  It would be much nicer to
   have a node/add/article/NID path that will add the article, AND set it up
   as the answer to the question NID.*/
function planetmath_attachable_content_attach($nid){
  $note = '';
  if(node_load($nid)->type=="question"){
    $note = "<br><br>Note: The way question answering works around here is that every answer is an encyclopedia article.<br>If you can't find an existing article that answers the question, you should ".l("create one",'node/add/article')." and come back to attach it later.";
  }
  return "Enter search terms into the first box above and hit \"Apply\" to find matching terms.  Once you've found what you're looking for, click \"Attach\"!".$note;
}


/* Implements hook_views_api
 * This is needed to get our custom view working
 * See planetmath_blocks.views.inc for details
 */
function planetmath_attachable_content_views_api() {
  return array(
	       'api' => 3, 
	       'path' => drupal_get_path('module', 'planetmath_attachable_content'), 
	       );
}

/* Add some links for the relevant node types */

function planetmath_attachable_content_authorlinks_assemble($node){
  $newlinks = array();
  if (isset($node->content['planetary_links'])) {
    $oldlinks = $node->content['planetary_links']['#links'];
    if (!empty($oldlinks)) {
      // Since "Add" is an important interaction, we put it at the front of the list
      $newlinks = array_merge(planetmath_attachable_content_add_links($node),$oldlinks);
    } else {
      $newlinks = planetmath_attachable_content_add_links($node);
    }
  } else {
    $newlinks = planetmath_attachable_content_add_links($node);
  }
  return $newlinks;
}

function planetmath_attachable_content_add_links($node) {

  if($node->type == 'question'){
    $link_string = "Answer this question!";
  } else if ($node->type == 'collection') {
    $link_string = "Add to this collection!";
  } else if ($node->type == 'group') {
    $link_string = "Add content to this group!";
  }

    $links = array(
		   'attach-something' => l($link_string, 
					'attach/'. $node->nid)
		   );
    return $links;
}

// show the "attach" link on *collections*, *groups*, and *unanswered questions*.
function planetmath_attachable_content_node_view($node, $view_mode){
  if($view_mode!='content'){
  if( ($node->type == 'question' 
        && !isset($node->field_question_closed['und'][0]['value']))
    ||$node->type == 'collection'
    ||$node->type == 'group') {

      $newlinks = planetmath_attachable_content_authorlinks_assemble($node);

      $node->content['planetary_links'] = array(
						'#markup' => '',
						'#weight' => 10,
						'#theme' => 'planetary_links',
						'#links' => $newlinks
						);
  }
  }
}