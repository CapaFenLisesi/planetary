<?php

//TODO: adjust documentation arguments

function tntbase_menu() {
  //create page where the paths can be configured
  // create a permission and give it by default to admins
}

/**
 * Method for importing the entire content under a specific
 * repository path
 * @param string $RootPath the path to the desired place of import
 * @return an array of associative arrays of (Body, BodyXHTML,
 * TitleXHTML, Revision, Path) to be considered as documents, or
 * <b>false</b> in case of an error
 */
function tntbase_import_repository($root_path) {
  $files = tntbase_get_document_names($root_path);
  if(false == $files) {
    return false;
  }
  $documents = array();
  foreach($files as $file_path) {
    //TODO: remove this hack
    $path_info = pathinfo($file_path);
    if($path_info['filename'] == 'dummy') {
      continue;
    }
    $document = tntbase_get_document($file_path);
    if(false == $document) {
      return false;
    }
    $documents[] = $document;
  }
  return $documents;
}

/**
 * Method used for retrieveing all of the relevant content for a set of documents
 * @param array $Documents the list of documents that need their content imported given as an array of paths to valid OMDOC documents in TNTBase
 * @return an array of associative arrays of (Body, BodyXHTML, TitleXHTML, Revision, Path) to be considered as documents, with <b>false</b> in case of an error
 */
function tntbase_import_documents($documents) {
  $all_content = array();
  foreach ($documents as $file_path) {
    $all_content[] = tntbase_get_document($file_path);
  }
  return $all_content;
}

/**
 * Method for getting all the revision numbers of a certain file when it was modified
 * @param string $FilePath the path into TNTBase of the file in question
 * @param bool $HeadOnly a flag to state if to get all of the revisions or just the head
 * @return an array of the revision numbers of a file in which it was modified, if they exist, <b>false</b> otherwise
 */
function tntbase_get_revisions($file_path, $revision = false) {
  $url = variable_get('TNTBase.FileRevisionURL') . $file_path;
  if (false !== $revision) {
    $url .= "?$revision";
  }
  $response = curli_get($url);
  return $response;
}

/**
 * Method used to return the head revision number
 * @return int the head revision number or <b>false</b> in case of errors
 */
function tntbase_get_head_revision() {
  $response = curli_get(variable_get('TNTBase.XQueryURL') .
              '/tnt:last-revnum()');
  $response = tntbase_strip_tntbase_results($response);
  $response = $response[0];
  return $response;
}

/**
 * Method used to get the updated content that has grown out of sync with TNTBase
 * @param int $Revision the revision number from which to check for updates
 * @return an associative array of (A, D) going to arrays of paths to the OMDOC of the respectively Added or Deleted content or <b>false</b> if an error occurred
 */
function tntbase_get_content_changes($revision) {
  $head_revision = tntbase_get_head_revision();
  if (false == $head_revision || $revision > $head_revision) {
    return false;
  }

  $log = tntbase_get_log($revision, $head_revision);
  $a = $log['A'];
  $added = array();
  $d = $log['D'];
  $deleted = array();

  foreach ($a as $file) {
    $path_info = pathinfo($file);
    if ("tex" == $path_info['extension']) {
      $added[] = $path_info['dirname'] . '/' . $path_info['filename'] . '.omdoc';
    }
  }

  foreach ($d as $file) {
    $path_info = $pathinfo($file);
    if ("tex" == $path_info['extension']) {
      $deleted[] = $path_info['dirname'] . '/' . $path_info['filename'] . '.omdoc';
    }
  }

  $response = array('A' => $added, 'D' => $deleted);
  return $response;
}

/**
 * Method to be used to get the content of a file path, none recursively, for organizing content at a position
 * @param string $FilePath the path to look at
 * @return the contents of the path in a key=>value array, with keys as FileName and values as types ('file' or 'directory or 'vdoc'')
 */
function tntbase_get_path_contents($file_path) {
  $response = curli_get(variable_get('TNTBase.FolderContentsURL') . $file_path);

  $document = new DOMDocument();
  $document->loadXML($response);

  $xpath = new DOMXPath($document);
  $xpath->registerNamespace('tnt', 'http://tntbase.mathweb.org/ns');
  $query = '//tnt:directory | //tnt:file | //tnt:vdoc';
  $nodelist = $xpath->query($query);

  $result = array();
  for ($i = 0; $i < $nodelist->length; $i++) {
    $name = $nodelist->item($i)->getAttribute('name');
    if (!empty($name)) {
      $result[$name] = substr($nodelist->item($i)->tagName, 4);
    }
  }

  if (empty($result) || $nodelist->length == 0) {
    return false;
  }
  return $result;
}


